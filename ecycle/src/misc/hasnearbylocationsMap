import React, { useEffect, useState } from 'react';
import axios from 'axios';

const Map = () => {
    const [userLocation, setUserLocation] = useState(null);
    const [locations, setLocations] = useState([]);
    const [manualAddress, setManualAddress] = useState('');
    const [useCurrentLocation, setUseCurrentLocation] = useState(true);
    const [type, setType] = useState('repair'); // Default to 'repair'
    const [error, setError] = useState('');
    const beachFlagImg = document.createElement("img");
    beachFlagImg.src = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";

    useEffect(() => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const { latitude, longitude } = position.coords;
                    setUserLocation({ lat: latitude, lng: longitude });
                    loadMap(latitude, longitude);
                },
                (error) => {
                    console.error("Error obtaining location", error);
                }
            );
        }
    }, []);

    const loadMap = (lat, lng) => {
        const map = new window.google.maps.Map(document.getElementById('map'), {
            center: { lat, lng },
            zoom: 13,
        });

        new window.google.maps.Marker({
            position: { lat, lng },
            map,
            title: "You are here!",
        });

        // Fetch nearby locations after the map is loaded
        fetchNearbyLocations(lat, lng);
    };

    const fetchNearbyLocations = async (lat, lng) => {
        try {
            const url = type === 'repair' 
                ? 'http://localhost:5000/nearby-repair-locations' 
                : 'http://localhost:5000/nearby-dispose-locations';

            const response = await axios.post(url, {
                lat,
                lon: lng,
            });
            setLocations(response.data.slice(0, 5)); // Take only the first 5 locations
            addMarkersToMap(response.data.slice(0, 5));
        } catch (err) {
            setError('Failed to fetch nearby locations');
        }
    };

    const addMarkersToMap = (locations) => {
        if (!userLocation) return; // Ensure userLocation is available

        const map = new window.google.maps.Map(document.getElementById('map'), {
            center: userLocation,
            zoom: 13,
        });

        // Add markers for each location
        locations.forEach((loc) => {
            new window.google.maps.Marker({
                map,
                position: { lat: loc.latitude, lng: loc.longitude },
                title: loc.Name,
            });
        });
    };

    const handleTypeChange = (event) => {
        setType(event.target.value);
        if (userLocation) {
            fetchNearbyLocations(userLocation.lat, userLocation.lng);
        }
    };

    return (
        <div>
            <h2>Your Location</h2>
            <div id="map" style={{ height: '400px', width: '100%' }}></div>

            <div>
                <label>
                    <input
                        type="radio"
                        value="repair"
                        checked={type === 'repair'}
                        onChange={handleTypeChange}
                    />
                    Repair
                </label>
                <label>
                    <input
                        type="radio"
                        value="dispose"
                        checked={type === 'dispose'}
                        onChange={handleTypeChange}
                    />
                    Dispose
                </label>
            </div>

            {error && <p style={{ color: 'red' }}>{error}</p>}
        </div>
    );
};

export default Map;